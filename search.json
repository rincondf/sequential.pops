[{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rincondf.github.io/sequential.pops/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"sequential.pops package designed simplify development, evaluation analysis sequential designs testing hypotheses population density. Sequential analyses particularly useful decision-making situations estimation goal, critical actions triggered population sizes reach predefined levels. situations include deciding whether pest control action applied, whether area declared free invasive species, whether early capture numbers pest consistent outbreak. Sequential analyses can also useful fields outside ecology pest management, quality control, fraud detection adaptive clinical trials, applications scope package. Sequential data arrive sampling bouts time processed come, order evaluate hypotheses practical decisions made sufficient evidence collected. Sequential designs typically cost-efficient conventional fixed-sample-size approaches, can purely sequential (one---time) group sequential (n > 1 per sampling bout). analysis biological population densities often carried collecting count data traps field observations binomial records structured clusters sampling units. sequential.pops package focuses count binomial data without overdispersion test hypotheses non-negative population sizes. R packages deal sequential designs. existing packages, GroupSeq, Grpseq, gsbDesign seqmon, focus adaptive clinical trials normally distributed variables. Others, gscounts, gsDesign, ASSISTant, Sequential BayesOrdDesign can take non-normal variables also focused clinical trials can hardly adapted process count binomial data ecological agricultural settings evaluate hypotheses population densities. packages general scope, MSPRT sprtt, include limited selection probability distributions lack functions evaluate tests’ operating characteristics. sequential.pops first R package devoted test hypotheses biological population densities. Two approaches included: Sequential Test Bayesian Posterior Probabilities (STBP) (Rincon et al. 2025), Sequential Probability Ratio Test (SPRT) (Wald 1945). STBP SPRT pros cons popular state---art approaches sequential analyses ecology pest management. tutorial walks development, evaluation analysis sequential designs STBP SPRT using sequential.pops package.","code":""},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"the-sequential-test-of-bayesian-posterior-probabilities","dir":"Articles","previous_headings":"","what":"1. The Sequential Test of Bayesian Posterior Probabilities","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"test specifically designed test hypotheses population densities, although may applications fields. works sequentially updating conditional probability hypothesis tested new data processed. two main benefits using STBP distribution-agnostic (works virtually probability distribution), one sequential analyses “likelihood ratio-free” meaning can test single hypotheses without specify non-complementary alternative. ’ll see later, sequential tests, SPRT (section 2), require two hypotheses, rather one, based likelihood ratios. Another advantage STBP can process purely sequential (one---time) group sequential (batches samples), balanced unbalanced, static (single-value) dynamic (population models) hypotheses without major modifications. main disadvantage STBP new tested counterparts rough streets real datasets. STBP also pretty sensitive sample sizes within sampling bouts. theory, outperforms sequential analysis long several samples collected within sampling bout, type error rate (accepting H false) gets ugly purely sequential designs.","code":""},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"example-1-testing-species-absence","dir":"Articles","previous_headings":"1. The Sequential Test of Bayesian Posterior Probabilities","what":"Example 1: Testing species absence","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Let’s start simple case one wants test hypothesis certain species absent sampled area. Carl Sagan said “absence evidence evidence absence”. words, can never sure absence species area, can calculate probability species absent given collected data. small population sizes, like recently introduced species, well described Poisson distributions. , case, want test H: mu = 0 assuming random sampling counts following Poisson distribution. lucky can collect say 30 random samples time, result absences (zeros), able track (posterior) probability H true sampling bout 30. Data structure sequential.pops counts based matrices, columns represent time (sampling bouts) rows samples within bouts. , example, collected 4 sampling bouts 30 samples, data arranged 30 x 4 matrix. case, zeros: run test, use stbp_simple, specially designed test hypotheses species absence, need specify hypothesis. need provide matrix data, distribution family (character string) density_func, initial prior probability (often 0.5), upper_criterion lower_criterion, upper lower criteria stop sampling make decision. argument upper_bnd almost always Inf, since represents upper limit parameter space mu. Given samples zero assuming completely efficient detection rate, can say 3 sampling bouts 30 samples pretty high change H: mu = 0 true. spaced time sampling bouts depends species sampled consider different sampling time. Notice upper_criterion lower_criterion set close 1 0, respectively. reality, test species absence, upper_criterion important minimize type II error, since posterior probability H become 0 soon get first detection (data > 0). sample size within sampling bouts reduced, expect loose power require bouts collect enough evidence achieve similar levels certainty species absent (case keep getting zeros, course). , can collect 3 samples per sampling bout, get zeros matrix data specified : 10 sampling bouts. running test : can see now require 9 sampling bouts achieve similar levels confidence declare species absent sampled area. number bouts zeros required accept H keeps increasing sampling size within bouts reduced. fact, sample size one (purely sequential), test looses power posterior remains unchanged regardless number bouts. can check progression posterior probabilities different sample sizes calling plot, sequential design 30 samples:  sequential design 3 samples:","code":"a30 <- matrix(rep(0, 120), 30, 4) head(a30, 3) # only first three rows out of 30 are shown #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    0 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 library(sequential.pops)  test30 <- stbp_simple(data = a30,                       density_func = \"poisson\",                       prior = 0.5,                       upper_bnd = Inf,                       lower_criterion = 0,                       upper_criterion = 0.9999) test30 #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.99996 from 3 sampling bouts #> Recommendation based on provided criteria: accept H a3 <- matrix(rep(0, 30), 3, 10) a3 #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    0    0    0    0    0    0    0    0    0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0 test3 <- stbp_simple(data = a3,                      density_func = \"poisson\",                      prior = 0.5,                      upper_bnd = Inf,                      lower_criterion = 0,                      upper_criterion = 0.9999) test3 #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.99995 from 9 sampling bouts #> Recommendation based on provided criteria: accept H plot(test30) plot(test3)"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"example-2-testing-if-a-population-is-above-a-static-threshold","dir":"Articles","previous_headings":"1. The Sequential Test of Bayesian Posterior Probabilities","what":"Example 2: Testing if a population is above a static threshold","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"STBP can also assist situations one wants test given population relevant threshold management. useful determine, example, pest population reached economic threshold endangered species Allee threshold. remaining tutorial, focus hypotheses populations threshold, procedure similar hypotheses opposite direction. fact specified single argument function stbp_composite. example, use case study tomato leafminer greenhouse tomatoes (Rincon et al. 2021). tomato leafminer significant pest tomatoes prefers mostly feed leaves damage minimum turn fruits population density increases. economic threshold varies depending whether tomato fruits present , now let’s assume threshold static (constant) 9 larvae per plant want test sequential sampling population exceeded threshold. population densities small, chances Poisson distribution longer appropriate describe counts probability distribution allow overdispersion (aggregation) required. populations increase, often aggregate clusters increase dispersion data levels accounted Poisson. case tomato leafminer, STBP defined negative binomial distribution specification dispersion, obtained studies counts observed field. details conduct studies reader referred textbooks like Binns et al. (2000). Let’s start generating negative binomial data purely sequential design (n = 1 per sampling bout): 20 random counts population 5 larvae per sample unit (plant) size follows negative binomial distribution overdispersion 4.5. can now build test hypothesis H: mu > 9 larvae per plant : Notice time use function stbp_composite, designed test threshold-style hypotheses. direction hypothesis (whether “greater ” “less ”) controlled argument greater_than threshold included argument hypothesis. lower_bnd upper_bnd parameter space boundaries hypothesis, mu, almost always 0 Inf, respectively. lower_criterion upper_criterion posterior probabilities decision made. Many times, however, overdispersion simple specified function mean, rather constant. case animal plant populations overdispersion highly tied variance, variance population counts tends increase exponentially mean. several ways empirically describe variance (overdispersion) function mean, popular one Taylor’s Power Law. sequential.pop package, can use whatever function want, just must specified running test. example, Taylor’s Power Law parameters describe variance-mean relationship tomato leafminer counts = 1.83 b = 1.21, overdispersion, k, given : can also incorporate realistic values overdispersion generated counts including estimate_k count generation function: test can specified : overdispersion function specified character string function name must added R environment running test. Although case instance randomly generated numbers, noticeable gains efficiency (fewer average number sampling bouts make decision) accuracy (less bad decisions) appropriate overdispersion function included part STBP (Rincon et al. 2025). stbp_simple can call plot visualize change posterior probabilities sequential sampling bouts stbp_composite tests. test constant overdispersion:  overdispersion function mean:  Sometimes data populations come counts binary outcomes sampling units evaluated presence/absence infested/uninfected, example. cases, stbp_composite equipped binomial beta-binomial options argument density_func. Like count data, selection one depends whether overdispersion data, beta-binomial option overdispersed binomial variables. kind data, two pieces information required sample unit: number successes (e.g., present infected) total number samples observations made. reason, data binomial variables structured list() n x 2 matrices, matrix corresponds sampling bout, n number sample units (clusters samples examined). number successes must included column 1 number samples column 2 matrix. example, sequential sampling designed collect 3 clusters (sampling units) made 10 samples 7 sampling bouts collected data introduced like: data generated list binom1 overdispersed constant overdispersion parameter, theta mean incidence prob = 0.2. required support work beta-binomial distribution emdbook package, must loaded running sequential tests involve distribution. STBP can run data binom1 : STBP correctly infers data binom1 consistent H: mu > 0.15. Like overdispersed count data, overdispersion binomial data can also included function mean proportion (sometines called incidence). , overdispersion model derived variance-mean (variance-incidence) relationship, popular form one provided Madden et al. (2007), although sequential.pops package allows pick whatever function want. function describes overdispersion, theta, function mean proportion tomato leafminer defined (Madden et al. 2007): b parameters variance-incidence model R number samples sampling unit (cluster). can generate new binomial dataset includes variable overdispersion: can specify run STBP : Notice argument upper_bnd tests test_bin1 test_bin2 set 1, rather Inf like tests processed counts, test_counts1 test_counts1a. parameter space population density, mu, binomial data [0, 1] [0, Inf] count data.","code":"counts1 <- rnbinom(20, mu = 5, size = 4.5) counts1 #>  [1] 7 3 9 3 4 4 4 4 6 3 4 3 5 1 4 5 2 9 4 1 test_counts1 <- stbp_composite(data = counts1,                                greater_than = TRUE,                                hypothesis = 9,                                density_func = \"negative binomial\",                                overdispersion = 4.5,                                prior = 0.5,                                lower_bnd = 0,                                upper_bnd = Inf,                                lower_criterion = 0.01,                                upper_criterion = 0.99) test_counts1 #>  #> Sequential test of Bayesian posterior probabilities #> Family: negative binomial #> H: mu > 9 #> Probability: 0.00548 from 11 sampling bouts #> Recommendation based on provided criteria: reject H estimate_k <- function(mean) {   a = 1.83    b = 1.21      (mean^2) / ((a * mean^(b)) - mean) } counts1a <- rnbinom(20, mu = 5, size = estimate_k(5)) counts1a #>  [1] 10  6 10 12  2  4 10  6  0  5  5  4  3  2  1 10  5  2  4  4 test_counts1a <- stbp_composite(data = counts1a,                                 greater_than = TRUE,                                 hypothesis = 9,                                 density_func = \"negative binomial\",                                 overdispersion = \"estimate_k\",                                 prior = 0.5,                                 lower_bnd = 0,                                 upper_bnd = Inf,                                 lower_criterion = 0.01,                                 upper_criterion = 0.99) test_counts1a #>  #> Sequential test of Bayesian posterior probabilities #> Family: negative binomial #> H: mu > 9 #> Probability: 0.00949 from 11 sampling bouts #> Recommendation based on provided criteria: reject H plot(test_counts1) plot(test_counts1a) library(emdbook) # for rbetabinom()  binom1 <- list() for(i in 1: 7) {   binom1[[i]] <- matrix(c(emdbook::rbetabinom(3, prob = 0.2,                                               size = 10,                                               theta = 6.5), rep(10, 3)), 3, 2) }  head(binom1, 3) # only first three sampling bouts out of seven are shown. #> [[1]] #>      [,1] [,2] #> [1,]    1   10 #> [2,]    0   10 #> [3,]    1   10 #>  #> [[2]] #>      [,1] [,2] #> [1,]    2   10 #> [2,]    6   10 #> [3,]    0   10 #>  #> [[3]] #>      [,1] [,2] #> [1,]    0   10 #> [2,]    6   10 #> [3,]    6   10 test_bin1 <- stbp_composite(data = binom1,                             greater_than = TRUE,                             hypothesis = 0.15,                             density_func = \"beta-binomial\",                             overdispersion = 6.5,                             prior = 0.5,                             lower_bnd = 0,                             upper_bnd = 1,                             lower_criterion = 0.001,                             upper_criterion = 0.999) test_bin1 #>  #> Sequential test of Bayesian posterior probabilities #> Family: beta-binomial #> H: mu > 0.15 #> Probability: 0.99999 from 4 sampling bouts #> Recommendation based on provided criteria: accept H estimate_theta <- function(mean) {   A = 780.72   b = 1.61   R = 10      (1 / (R - 1)) * (((A * R^(1 - b))/ ((mean * (1 - mean))^(1 - b))) - 1) } binom2 <- list() for(i in 1: 7) {   binom2[[i]] <- matrix(c(rbetabinom(3, prob = 0.2,                                      size = 10,                                      theta = estimate_theta(0.2)),                           rep(10, 3)), 3, 2) }  head(binom2, 3) # only first three sampling bouts out of seven are shown. #> [[1]] #>      [,1] [,2] #> [1,]    1   10 #> [2,]    2   10 #> [3,]    1   10 #>  #> [[2]] #>      [,1] [,2] #> [1,]    3   10 #> [2,]    4   10 #> [3,]    1   10 #>  #> [[3]] #>      [,1] [,2] #> [1,]    2   10 #> [2,]    4   10 #> [3,]    2   10 test_bin2 <- stbp_composite(data = binom2,                             greater_than = TRUE,                             hypothesis = 0.15,                             density_func = \"beta-binomial\",                             overdispersion = \"estimate_theta\",                             prior = 0.5,                             lower_bnd = 0,                             upper_bnd = 1,                             lower_criterion = 0.001,                             upper_criterion = 0.999) test_bin2 #>  #> Sequential test of Bayesian posterior probabilities #> Family: beta-binomial #> H: mu > 0.15 #> Probability: 0.99935 from 3 sampling bouts #> Recommendation based on provided criteria: accept H"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"test-evaluation","dir":"Articles","previous_headings":"1. The Sequential Test of Bayesian Posterior Probabilities > Example 2: Testing if a population is above a static threshold","what":"Test evaluation","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"sequential.pops package equipped tools evaluate accuracy efficiency specifications STBP. perfectly accurate sequential test, acceptance rates H: mu > psi zero true population < psi 1 > psi, minimum (efficient) average number samples. Thus, evaluation STBP involves analysis proportion times H accepted across range true population densities corresponding number sampling bouts required make decision. Sometimes analyses called “operating characteristics”. need run evaluation STBP STBP object, created every time test run stbp_composite, evaluation range, sequence population densities evaluation performed, sample size within bouts. can add additional levels sophistication playing initial prior probability adding stochasticity overdipersion parameter, case using one. demonstrate evaluation STBP use STBP objects created . simplest one test_counts1, purely sequential design tests H: mu > 9 constant overdispersion k = 4.5. evaluation, relevant information extracted test_counts1 test specification, data really used. run evaluation test_counts1 call function STBP.eval: Notice evaluation range true population densities (eval.range) includes psi, threshold (hypothesis), particularly interested examining behavior test population size close threshold. Also, purely sequential approach kept analysis (n = 1), also try samples sizes. argument N number simulations run true population size. case 20, total 200 simulations run (20 * length(seq(3, 12))), pretty small formal analysis. run, least, 1000 simulation per population size formal test. output STBP.eval list() two vectors: $AvgSamples $AcceptRate. many elements length(eval.range) first mean number sampling bouts required make decision H second proportion simulation runs resulted acceptance H. can visualized across evaluated range true population densities test performance around threshold 9:   argument STBP.eval function called overdispersion.sim omitted eval1. overdispersion.sim, can specify overdispersion functions values different specified test. , eval1, overdispersion used run simulations test test_counts1. However, realistic test evaluations can performed (1) varying overdispersion included (2) stochasticity variance-mean relationship considered. first can either specified model (test_counts1a test_bin2) directly STBP.eval overdispersion.sim, case model. add stochasticity, however, declare new overdispersion function allowance variability. new function similar one used models includes random normal variable mean = 0 standard deviation sd new factor. Conventionally, sd square root mean square error regression used fit variance-mean model: Taylor’s Power Law, count data, Madden’s model binomial data (Binns et al. 2000). example, want add stochasticity evaluation model test_counts1a, incorporate normal random variable function estimate_k : Notice estimate_k_stoch similar estimate_k except former includes exponential normal random variable factor denominator. use truncated normal distribution, form truncdist package, prevent zero denominators negative values k, can also use rnorm different alternative stay away undefined negative values overdispersion parameter. run evaluation including stochasticity, just specify estimate_stoch character string argument overdispersion.sim. Test evaluation useful tool compare different sequential analysis approaches, can also useful calibrate sample size, decision criteria impact (incorrect) initial priors sequential designs. example, can compare accuracy efficiency tests different sample sizes within bouts. eval3a includes 1 3 samples per sampling bout eval6a includes 6 samples. can now visualize sample size within bouts affects accuracy efficiency:   limited analysis (20 simulations per population density) shows sample sizes 3 (filled circles) 6 (empty squares) outperform accuracy efficiency purely sequential design (empty circles). gains accuracy can achieved increasing sample size 3 6. Test evaluation similar binomial data, except evaluation range [0, 1] interval. analog estimate_k_stoch binomial world tomato leafminer examples defined (Binns et al. 2000): Now, can run similar analysis compare sample sizes binomial design. One important difference binomial count sampling sample sizes binomial designs typically require samples, although quicker easier examine. Simulations within STBP.eval con consider binomial sampling sample units clusters made single observation (size = 1). , within STBP.eval, n = 1 means single presence/absence infected/uninfected observation. compensate, argument n STBP.eval reflect total number observations considering clusters. example, plan design binomial sequential sampling three clusters 10 observations (samples), sample size evaluation set 30, n = 30. test 10, 20 30 total observations. Notice evaluation range proportions [0.01, 0.25], excluding 0 avoid warnings, considering H set H: mu > 0.15 test_bin2. can also visualize acceptance rate H average number bouts across true incidences:   , limited analysis made 20 simulations per true incidence. However, shows number bouts required make decision decreases sample size, designs 10 samples (empty circles) struggling make quick decision incidence far threshold 0.15, compared sample sizes 20 (filled circles) 30 (empty squares). Accuracy also affected sample size n = 20 n = 30 producing less incorrect decisions, particularly true incidence threshold.","code":"eval1 <- STBP.eval(test_counts1,                    eval.range = seq(3, 12),                    n = 1,                    prior = 0.5,                    N = 20) eval1 #> $AvgSamples #>  [1]  4.05  5.60  9.75 14.05 10.20  7.95  6.15  5.70  3.95  3.15 #>  #> $AcceptRate #>  [1] 0.00 0.00 0.05 0.50 0.85 1.00 1.00 1.00 1.00 1.00 plot(seq(3, 12), eval1$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\") abline(v = 9, lty = 2) plot(seq(3, 12), eval1$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H\") abline(v = 9, lty = 2) estimate_k_stoch <- function(mean) {   a = 1.83   b = 1.21   RMSE = 0.32      (mean^2) /      ((a * mean^(b) * exp(truncdist::rtrunc(1, \"norm\",                                             a = log(1 / (a * mean^(b - 1))),                                             b = Inf,                                             mean = 0,                                             sd = RMSE)))       - mean) } eval1a <- STBP.eval(test_counts1,                     eval.range = seq(3, 12),                     n = 1,                     prior = 0.5,                     overdispersion.sim = \"estimate_k_stoch\",                     N = 20) eval1a #> $AvgSamples #>  [1]  3.40  5.50  7.65 11.40 12.50  6.20  6.50  4.30  4.10  3.35 #>  #> $AcceptRate #>  [1] 0.05 0.00 0.20 0.40 0.75 0.85 1.00 1.00 1.00 1.00 eval3a <- STBP.eval(test_counts1,                     eval.range = seq(3, 12),                     n = 3,                     prior = 0.5,                     overdispersion.sim = \"estimate_k_stoch\",                     N = 20)  eval6a <- STBP.eval(test_counts1,                     eval.range = seq(3, 12),                     n = 6,                     prior = 0.5,                     overdispersion.sim = \"estimate_k_stoch\",                     N = 20) plot(seq(3, 12), eval1a$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\") points(seq(3, 12), eval3a$AvgSamples, type = \"o\", pch = 19) points(seq(3, 12), eval6a$AvgSamples, type = \"o\", pch = 0) abline(v = 9, lty = 2) plot(seq(3, 12), eval1a$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H\") points(seq(3, 12), eval3a$AcceptRate, type = \"o\", pch = 19) points(seq(3, 12), eval6a$AcceptRate, type = \"o\", pch = 0) abline(v = 9, lty = 2) estimate_theta_stoch <- function(mean) {   A = 780.72   b = 1.61   R = 10   RMSE = 0.41      ((1 / (R - 1)) * (((A * R^(1 - b) *     exp(rnorm(1, mean = 0, sd = RMSE))) / ((mean * (1 - mean))^(1 - b))) - 1)) } evalB10 <- STBP.eval(test_bin2,                      eval.range = seq(0.01, 0.25, 0.02),                      n = 10,                      prior = 0.5,                      overdispersion.sim = \"estimate_theta_stoch\",                      N = 20)  evalB20 <- STBP.eval(test_bin2,                      eval.range = seq(0.01, 0.25, 0.02),                      n = 20,                      prior = 0.5,                      overdispersion.sim = \"estimate_theta_stoch\",                      N = 20)  evalB30 <- STBP.eval(test_bin2,                      eval.range = seq(0.01, 0.25, 0.02),                      n = 30,                      prior = 0.5,                      overdispersion.sim = \"estimate_theta_stoch\",                      N = 20) plot(seq(0.01, 0.25, 0.02), evalB10$AvgSamples, type = \"o\", xlab = \"True incidence\",       ylab = \"Average number of bouts\") points(seq(0.01, 0.25, 0.02), evalB20$AvgSamples, type = \"o\", pch = 19) points(seq(0.01, 0.25, 0.02), evalB30$AvgSamples, type = \"o\", pch = 0) abline(v = 0.15, lty = 2) plot(seq(0.01, 0.25, 0.02), evalB10$AcceptRate, type = \"o\", xlab = \"True incidence\",       ylab = \"Acceptance rate of H\") points(seq(0.01, 0.25, 0.02), evalB20$AcceptRate, type = \"o\", pch = 19) points(seq(0.01, 0.25, 0.02), evalB30$AcceptRate, type = \"o\", pch = 0) abline(v = 0.15, lty = 2)"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"example-3-testing-if-a-population-is-above-a-dynamic-threshold","dir":"Articles","previous_headings":"1. The Sequential Test of Bayesian Posterior Probabilities","what":"Example 3: Testing if a population is above a dynamic threshold","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Sometimes hypotheses population densities single numbers, entire population trajectories. case monitoring programs designed track target population time decide early possible whether management action necessary prevent outbreak. Population models often assist prediction densities time based current densities growth rates, profile population dynamics result problematic population sizes often known. example real data presented Rincon et al. (2025). use logistic population growth model, pop.outB, make outbreak population trajectory 20 weekly population densities results densities tolerated. call trajectory OB_pop <- pop.outB(t = seq(1, 20)), t given weeks.  goal determine, fewest possible number sampling bouts collected time, sampled population consistent one equivalent greater pop.outB. One complication threshold moving target differences outbreak non-outbreak population configurations first weeks (want make informed decision) often tiny, tend amplify time. Thus, test able detect early tiny differences produce correct early warnings. Every cycle/season population may behave differently can use outbreak configuration reference quantify severe . example, non-outbreaks portion outbreak, bad seasons/cycles even take larger population sizes reference outbreak. can produce several variants population trajectories based outbreak:  trajectory bold outbreak population configuration, OB_pop, rest outbreak non-outbreak variants. pattern triangles configuration 50% outbreak, one squares one 70% outbreak, circles 90% outbreak, diamonds represents one surpasses outbreak 10%. Modeling variants using outbreak reference (proportions) realistic varying single parameters pop.outB function, since multiple mechanisms drive simultaneously outbreak severity. ’ll see , evaluation range evaluate STBP dynamic thresholds STBP.eval provided factors threshold trajectory. Like static hypotheses, data dynamic hypotheses come sequential bouts counts proportions without overdispersion, data structured way. difference true density varies time according population model. example, data collected sequentially bouts 10 samples population 70% outbreak ca generated : Notice using negative binomial specification example 2, varying overdispersion described function estimate_k, constant overdispersion also used. can visualize sample means per sampling bout (means across columns counts70) along outbreak trajectory, OB_pop:  run test count70, specify outbreak trajectory (function) hypothesis argument stbp_composite: STBP rejects H: trajectory mu > trajectory OB_pop two bouts. procedure test dynamic hypotheses binomial data similar, except trajectories provided proportions (incidence) data structured list() matrices column 1 successes column 2 samples.","code":"pop.outB <- function(t) {   N0 = 15   K = 90   r = 0.25      K / (1 + (K / N0 - 1) * exp(-r * t)) }  OB_pop <- pop.outB(t = seq(1, 20))  plot(seq(1, 20), OB_pop, xlab = \"Time (weeks)\",       ylab  = \"Population density\", lwd = 2, type = \"o\", pch = 19) plot(seq(1, 20), OB_pop, ylim = c(0, 95), type = \"o\",       lwd = 2, ylab = \"Population size\", xlab = \"Time (weeks)\", pch = 19) points(seq(1, 20), OB_pop * 0.9, type = \"o\") points(seq(1, 20), OB_pop * 0.7, type = \"o\", pch = 0) points(seq(1, 20), OB_pop * 0.5, type = \"o\", pch = 2) points(seq(1, 20), OB_pop * 1.1, type = \"o\", pch = 5) pop70 <- OB_pop * 0.7 count70 <- matrix(NA, 10, 20)  for(i in 1:20){   count70[, i] <- rnbinom(10, mu = pop70[i], size = estimate_k(pop70[i])) }  head(count70, 3) # only first three samples out of ten are shown #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]   10   18   15   18   28   36   24   17   31    52    34    58    52    43 #> [2,]   11   14   25   20   10   24   39   37   42    38    50    74    34    88 #> [3,]   21   17   19   42   19   16   27   39   50    35    61    42    56    37 #>      [,15] [,16] [,17] [,18] [,19] [,20] #> [1,]    59    69    67    60    41    53 #> [2,]    53    45    47    61    28    69 #> [3,]    50    54    58    87    75    75 plot(seq(1, 20), OB_pop, ylim = c(0, 95), type = \"o\",       lwd = 2, ylab = \"Population size\", xlab = \"Time (weeks)\", pch = 19) points(seq(1, 20), colMeans(count70), type = \"o\") test_dyn <- stbp_composite(data = count70,                            greater_than = TRUE,                            hypothesis = OB_pop,                            density_func = \"negative binomial\",                            overdispersion = \"estimate_k\",                            prior = 0.5,                            lower_bnd = 0,                            upper_bnd = Inf,                            lower_criterion = 0.001,                            upper_criterion = 0.999) test_dyn #>  #> Sequential test of Bayesian posterior probabilities #> Family: negative binomial #> H: mu > Trajectory =  OB_pop #> Probability: 0.00011 from 2 sampling bouts #> Recommendation based on provided criteria: reject H"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"test-evaluation-1","dir":"Articles","previous_headings":"1. The Sequential Test of Bayesian Posterior Probabilities > Example 3: Testing if a population is above a dynamic threshold","what":"Test evaluation","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"STBP dynamic hypotheses can evaluated way tests static hypotheses. difference eval.range provided factors threshold trajectory. example, test_dyn, evaluation run data generated range percentages OB_pop = pop.outB(seq(1, 20)), OB_pop * 0.5 50% outbreak, OB_pop * 0.7 70% outbreak, OB_pop * 1.2 20% outbreak. can refer factors “outbreak intensities”. can visualize average number bouts required make decision acceptance rate H across true outbreak intensities.   pattern similar one shown static hypotheses (example 2). Average sampling bouts peaks threshold (outbreak intensity = 1) decision-making toughest samples required distinguish outbreaks non-outbreaks. Acceptance rate H 0 low outbreak intensities reaches 1 threshold (outbreak intensity = 1). , value analysis stems ability check balance sampling effort accuracy results varying decision criteria (arguments lower_criterion upper_criterion) sampling size within bouts.","code":"eval_dyn <- STBP.eval(test_dyn,                       eval.range = seq(0.2, 1.5, 0.2),                       n = 10,                       prior = 0.5,                        N = 20) plot(seq(0.2, 1.5, 0.2), eval_dyn$AvgSamples, type = \"o\", xlab = \"True outbreak       intensity\", ylab = \"Average number of bouts\") abline(v = 1, lty = 2) plot(seq(0.2, 1.5, 0.2), eval_dyn$AcceptRate, type = \"o\", xlab = \"True outbreak       intensity\", ylab = \"Acceptance rate of H\") abline(v = 1, lty = 2)"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"the-sequential-probability-ratio-test","dir":"Articles","previous_headings":"","what":"2. The Sequential Probability Ratio Test","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"SPRT invented context quality control back 40s, widely applied many fields, including population management clinical trials. fact, R packages implement SPRT, particularly field clinical trials (see introduction list). SPRT popular among practitioners Integrated Pest Management, often familiar charts two parallel lines cumulative pest counts overlapped decide sampling continue enough evidence stop decide favor hypothesis tested. SPRT extensively tested shown optimal restricted range contexts. SPRT can easily implemented even without calculator just comparing data stop lines “fly”. main difference STBP SPRT philosophical. STBP provides recommendations H based Bayesian probabilities, SPRT based likelihood ratios. Bayesian probabilities understood credibility H true given data, likelihood ratios rely frequency observations occur face two competing models. reason, decision criteria STBP (.e., arguments lower_criterion upper_criterion) directly associated type type II error rates stbp_simple stbp_composite outputs include final posterior probability (credibility) H. SPRT, tolerable type type II error rates explicitly set part test specification final likelihood ratio relevant since “significance” result stated beginning provided one two stop lines reached. One important drawback SPRT requires specification two non-related hypotheses. can’t test single hypothesis complementary, like STBP, SPRT requires two simple hypothesis produce probability ratio time new data come. Also, SPRT can’t process group sequential data, unless use mean, median mode conventional form used test dynamic hypotheses. want use SPRT dynamic hypotheses, must use variation called Time-Sequential Probability Ratio Test, implemented sequential.pops package yet.","code":""},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"example-4-testing-if-a-population-is-above-a-threshold","dir":"Articles","previous_headings":"2. The Sequential Probability Ratio Test","what":"Example 4: Testing if a population is above a threshold","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Like sequential tests, SPRT assist situations one wants test given population threshold. main difference STBP SPRT specified two hypotheses instead one. rules hypotheses stated want test single threshold-style hypothesis. Conventionally, formulated equidistant threshold density, using confidence intervals threshold, approaches. example, use case study tomato leafminer greenhouse tomatoes. Let’s assume economic threshold static (constant) 9 larvae per plant want test, sequential sampling, population exceeded threshold. sequential.pops package, probability distributions available STBP also available SPRT, except beta-binomial, stop lines derived yet. Similar STBP, distributions without overdispersion (poisson binomial) used test sample small population sizes. population grow start aggregate overdispersion becomes nuisance must accounted using appropriate distributions (negative binomial). However, specify SPRT overdispersion parameter used threshold density calculate stop lines. function obtain reliable values overdispersion parameter based mean, can used model evaluation generate realistic data. Unlike STBP, can specify SPRT without data, case ’ll get chart corresponding stop lines output. example, want build test specification H: mu > 9 larvae per plant, provide two hypotheses allow sequential calculation probability ratios, H0: mu = 8 H1: mu = 10. also must provide probability distribution, overdispersion parameter value (case distribution negative binomial), tolerable type (alpha) type II (beta) error rates: Notice data provided, overdispersion function value specified function threshold density 9 larvae per plant. chart stop line ready contrast cumulative counts returned call plot:  coefficients stops lines calling object: Now let’s generate data specifications example 2. negative binomial distribution function estimate_k obtain overdispersion based mean: 20 random counts population 5 larvae per sample unit (plant) size. run function sprt data, SPRT test performed new \"SPRT\" object created. output similar one generated functions stbp_simple stbp_composite. case, H0 accepted, evidence compatible sampled population threshold 9 individuals per plant. contrast stbp_simple stbp_composite, output sprt provide probability precision final decision relies selected values alpha beta. , note overdispersion provided value function. also plot method \"SPRT\" objects, overlap stop lines cumulative counts:  case, whole sequence 20 counts displayed, sampling terminated 9th bout cumulative counts touched area lower stop line. procedure binary variables similar, cluster sampling (.e., ability collect clusters samples, like STBP) allowed. Instead, 1 0 values can introduced decisions based cumulative number 1s across sampling bouts. example, binary data collected sequentially SPRT structured vector can contain 1 0. example, can generate binary data population mean incidence prob = 0.5, without cluster sampling, size = 1: , get stop lines chart corresponding coefficients set sampling plan H: mu > 0.4 just specifying test H0: mu = 0.35 vs. H1: mu = 0.45 omitting argument data function sprt:  obtain stop lines coefficients : Now, can run SPRT data binPR : case, 34 binomial sampling bouts made single observation required make decision H0 H1. object testPR2 can also used produce chart compares stop lines cumulative data:","code":"testPR10 <- sprt(mu0 = 8,                  mu1 = 10,                  density_func = \"negative binomial\",                  overdispersion = estimate_k(9),                  alpha = 0.1,                  beta = 0.1) plot(testPR10) testPR10 #>  #> Sequential Probability Ratio Test - Stop lines #> Family: negative binomial #> H0: mu = 8 #> H1: mu = 10  #>  #> Upper line coefficients: #> Intercept =  28.45668 #> Slope =  8.93856 #> Lower line coefficients: #> Intercept =  -28.45668 #> Slope =  8.93856 counts1a <- rnbinom(20, mu = 5, size = estimate_k(5)) counts1a #>  [1]  2  2  5  1  7 17  4  6  5 11  7  5  4  5  4  5  8  6  4  5 testPR1 <- sprt(data = counts1a,                 mu0 = 8,                 mu1 = 10,                 density_func = \"negative binomial\",                 overdispersion = estimate_k(9),                 alpha = 0.1,                 beta = 0.1) testPR1 #>  #> Sequential Probability Ratio Test #> Family: negative binomial #> H0: mu = 8 #> H1: mu = 10  #>  #> Recommendation based on provided criteria: accept H0 #> Number of sampling bouts processed:  9 plot(testPR1) binPR <- rbinom(40, prob = 0.5, size = 1) binPR #>  [1] 0 1 1 1 1 0 0 1 1 1 1 0 1 0 1 0 1 1 0 0 0 1 0 0 1 0 1 0 1 0 1 1 0 1 1 1 0 0 #> [39] 0 0 testPR20 <- sprt(mu0 = 0.35,                  mu1 = 0.45,                  density_func = \"binomial\",                  alpha = 0.1,                  beta = 0.1) plot(testPR20) testPR20 #>  #> Sequential Probability Ratio Test - Stop lines #> Family: binomial #> H0: mu = 0.35 #> H1: mu = 0.45  #>  #> Upper line coefficients: #> Intercept =  5.251888 #> Slope =  0.3992989 #> Lower line coefficients: #> Intercept =  -5.251888 #> Slope =  0.3992989 testPR2 <- sprt(data = binPR,                 mu0 = 0.35,                 mu1 = 0.45,                 density_func = \"binomial\",                 alpha = 0.1,                 beta = 0.1) testPR2 #>  #> Sequential Probability Ratio Test #> Family: binomial #> H0: mu = 0.35 #> H1: mu = 0.45  #>  #> Recommendation based on provided criteria: accept H1 #> Number of sampling bouts processed:  34 plot(testPR2)"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"test-evaluation-2","dir":"Articles","previous_headings":"2. The Sequential Probability Ratio Test > Example 4: Testing if a population is above a threshold","what":"Test evaluation","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Like STBP, goal evaluating SPRT check specifications adjust achieve nice balance sampling effort precision. procedure requirements outputs similar. test evaluation, overdispersion negative binomial can specified function without stochasticity. evaluation constant overdispersion (model testPR1) performed : Notice need specify overdispersion constant use model used default. wanted add function describes overdipersion added stochasticity scrip : Now can compare evaluations, without functional description overdispersion stochasticity:   Notice evaluation SPRT performed acceptance rate H1. mentioned , addition realistic descriptions overdispersion across count binomial data provides realistic expectation test applied real data. figures produced , triangles denote evaluation assuming constant overdispersion circles varying overdispersion added stochasticity. Although based far simulations (N = 20), shows simulations omit varying nature overdispersion underestimate number sampling bouts required make decision rate incorrect decisions, specially true population size threshold. Evaluation tests binomial data similar:   Although binomial sampling quicker easier, requires significantly samples count sampling precision often compromised . However, binomial sampling can good alternative threshold population density small [see Binns et al. (2000) discussion].","code":"evalPR1 <- SPRT.eval(testPR1, eval.range = seq(4, 12), N = 20) evalPR1a <- SPRT.eval(testPR1, eval.range = seq(4, 12),                       overdispersion.sim = \"estimate_k_stoch\",                       N = 20) plot(seq(4, 12), evalPR1a$AvgSamples, xlab = \"True population size\",      ylab = \"Average number of bouts\", type = \"o\") points(seq(4, 12), evalPR1$AvgSamples, type = \"o\", pch = 2) abline(v = 9, lty = 2) plot(seq(4, 12), evalPR1a$AcceptRate, xlab = \"True population size\",      ylab = \"Acceptance rate of H1\", type = \"o\") points(seq(4, 12), evalPR1$AcceptRate, type = \"o\", pch = 2) abline(v = 9, lty = 2) evalPR2 <- SPRT.eval(testPR2, eval.range = seq(0.1, 0.8, 0.1), N = 20)  plot(seq(0.1, 0.8, 0.1), evalPR2$AvgSamples, xlab = \"True incidence\",      ylab = \"Average number of bouts\", type = \"o\") abline(v = 0.4, lty = 2) plot(seq(0.1, 0.8, 0.1), evalPR2$AcceptRate, xlab = \"True incidence\",      ylab = \"Acceptance rate of H1\", type = \"o\") abline(v = 0.4, lty = 2)"},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"wishlist-for-future-versions","dir":"Articles","previous_headings":"","what":"Wishlist for future versions","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Implement cluster sampling eval functions STBP SPRT Include time-sequential probability ratio test dynamic thresholds Implement cluster sampling SPRT Protocol run eval functions faster parallel computing","code":""},{"path":"https://rincondf.github.io/sequential.pops/articles/Seq-vignette.html","id":"cited-literature","dir":"Articles","previous_headings":"","what":"Cited literature","title":"Sequential testing of hypotheses about population density with the `sequential.pops` package","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y (USA). 284pp. Madden, L. V., Hughes, G., & Bosch, F.v.d. (2007). study plant disease epidemics. American Phytopathological Society. St. Paul, MN (USA). 421pp. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. https://doi.org/10.1111/2041-210X.70053 Rincon, D. F., Rivera- Trujillo, H. F., Mojica- Ramos, L., & BorreroEcheverry, F. (2021) Sampling plans promoting farmers’ memory provide decision support Tuta absoluta management. Agronomy Sustainable Development, 41: 33. https://doi.org/10.1007/s13593-021-00693-0 Wald, . (1945) Sequential Tests Statistical Hypotheses. Annals Mathematical Statistics 16(2): 117-186.","code":""},{"path":"https://rincondf.github.io/sequential.pops/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego F Rincon. Author, maintainer, copyright holder. Izzy McCabe. Author. David W Crowder. Author.","code":""},{"path":"https://rincondf.github.io/sequential.pops/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rincon D, McCabe , Crowder D (2025). sequential.pops: Sequential Analysis Biological Population Sizes. doi:10.32614/CRAN.package.sequential.pops, R package version 0.1.1, https://CRAN.R-project.org/package=sequential.pops.","code":"@Manual{,   title = {sequential.pops: Sequential Analysis of Biological Population Sizes},   author = {Diego F Rincon and Izzy McCabe and David W Crowder},   note = {R package version 0.1.1},   year = {2025},   url = {https://CRAN.R-project.org/package=sequential.pops},   doi = {10.32614/CRAN.package.sequential.pops}, }"},{"path":"https://rincondf.github.io/sequential.pops/index.html","id":"sequentialpops-sequential-analysis-of-biological-populations-sizes-","dir":"","previous_headings":"","what":"Sequential Analysis of Biological Population Sizes","title":"Sequential Analysis of Biological Population Sizes","text":"Tools test sequentially hypotheses population sizes. Two approaches included. 1. sequential test Bayesian posterior probabilities (Rincon, D.F., McCabe, . & Crowder, D.W. 2025): test based sequence conditional probabilities obtained data can explicitly consider simple composite hypotheses static dynamic population densities process either purely sequential (one---time) group sequential data. 2. sequential probability ratio test (Wald, . 1945): test based probability ratios obtained likelihood data two contrasted (non-complementary) hypotheses. package includes tools run evaluate sequential tests, produce charts stop lines, summarize results.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class encapsulates results specification Sequential Probability Ratio Test.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"call (language) call sprt. data (numeric, logical) Either vector cumulative counts NA. hi_int (numeric) Intercept lower stop line. low_int (numeric) Intercept higher stop line. slope (numeric) Slope stop lines. recommendation (character, logical) Either recommendation whether accept H0 H1, keep sampling, NA. iterations (numeric) Number sequential sampling bouts required processed.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"counts <- c(2, 5, 6, 2, 7)  test11 <- sprt(data = counts,                 mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) show(test11) # returns \"accept H1\" after 5 sampling bouts processed. #>  #> Sequential Probability Ratio Test #> Family: negative binomial #> H0: mu = 2 #> H1: mu = 4  #>  #> Recommendation based on provided criteria: accept H1 #> Number of sampling bouts processed:  5  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of Sequential probability ratio tests — SPRT.eval","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"Obtains average number sampling bouts rate acceptance \\(H_{1}\\), sequential test \\(H_{0}:\\mu = \\psi_{0}\\) vs. \\(H_{1}:\\mu < \\psi_{1}\\) across range true population densities, based simulations. Sometimes called \"operating characteristics\".","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"","code":"SPRT.eval(obj, eval.range, overdispersion.sim = NA, N, seed = NULL)"},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"obj object class \"SPRT\". eval.range vector sequence true population densities evaluate. overdispersion.sim character string (function) non-negative number specifying overdispersion parameter used generate simulated counts. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. N Number simulations per true population density evaluated. seed Optional seed random count generation.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"list average number sampling bouts required reach decision ($AvgSamples), rate acceptance \\(H_{1}\\) across provided range population densities ($AcceptRate).","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"kernel probability density function evaluate test specified argument density_func create \"SPRT\" object, overdispersion can different generate simulated counts. \"negative binomial\" used kernel density test overdispersion.sim specified (NA), specification test used generate counts. Ideally, overdispersion simulations include uncertainty parameter produce robust test evaluations. example, using negative binomial kernel Taylor's Power Law approach obtain overdispersion, overdispersion simulations specified : $$k = \\frac{\\mu^2}{\\mu^b e^z - \\mu}$$ \\(k\\) overdispersion parameter negative binomial distribution, \\(\\) \\(b\\) parameters Taylor's Power Law \\(z\\) normally distributed variable mean \\(0\\) standard deviation \\(\\sigma_{e}\\), root mean square error regression used estimate \\(\\) \\(b\\). See examples.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/SPRT.eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation of Sequential probability ratio tests — SPRT.eval","text":"","code":"# Function that describes negative binomial overdisperion from the mean # and Taylor's Power Law parameters, a and b:  estimate_k <- function(mean) {                         a = 1.830012                         b = 1.218041 # a and b are Taylor's Power Law parameters                         (mean^2) / ((a * mean^(b)) - mean)                        }  # Generate a SPRT object with negative binomial and varying overdispersion  counts <- c(2, 5, 6, 2, 7)  test11 <- sprt(data = counts,                 mu0 = 8,                 mu1 = 10,                 density_func = \"negative binomial\",                 overdispersion = estimate_k(9),                 alpha = 0.1,                 beta = 0.1)  # Stochastic version of 'estimate k', where sd here is the the root of the # mean square error for the regression used to estimate a and b.  estimate_k_stoch <- function(mean) {                               a <- 1.830012                               b <- 1.218041                               (mean^2) /                                 ((a * mean^(b) *                                   exp(truncdist::rtrunc(1,                                                         \"norm\",                                                         a = log(1 / (a * mean^(b - 1))),                                                         b = Inf,                                                         mean = 0,                                                         sd = 0.3222354)))                                          - mean)                                    }  # Run model evaluation for test11 with varying overdispersion and # added stochasticity.  eval4 <- SPRT.eval(test11, eval.range = seq(4, 13),                     overdispersion.sim = \"estimate_k_stoch\", N = 30) #> Error in estimate_k_stoch(pop_mean): could not find function \"estimate_k_stoch\"  plot(seq(4, 13), eval4$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval4' not found plot(seq(4, 13), eval4$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H1\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval4' not found  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class encapsulates results Sequential tests Bayesian posterior probabilities","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"call (language) call stbp_simple stbp_composite. probabilities (numeric) Vector sequential posterior probabilities. recommendation (character) Recommendation H, whether accept, reject keep sampling. iterations (numeric) Number sequential sampling bouts required processed.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"set.seed(101) counts3 <- rpois(5, lambda = 3)  test1F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 5,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.001,                           upper_criterion = 0.999) test1F # returns \"reject H\". #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu > 5 #> Probability: 0.00097 from 2 sampling bouts #> Recommendation based on provided criteria: reject H  counts10 <- matrix(rep(0, 30), 10, 3)  test1G <- stbp_simple(data = counts10,                         density_func= \"poisson\",                         prior = 0.5,                         upper_bnd = Inf,                         lower_criterion = 0,                         upper_criterion = 0.9999) test1G # returns \"keep sampling\" due to insufficient evidence. #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.999 from 3 sampling bouts #> Recommendation based on provided criteria: keep sampling  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"Obtains average number sampling bouts rate acceptance \\(H:\\mu > \\psi\\) \\(H:\\mu < \\psi\\) across range true population densities, based simulations. Sometimes called \"operating characteristics\".","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"","code":"STBP.eval(obj, eval.range, n, prior, overdispersion.sim = NA, N, seed = NULL)"},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"obj object class \"STBP\". eval.range evaluation range. vector sequence true population densities evaluate. hypothesis argument test trajectory (.e., vector), evaluation range factor hypothesized trajectory. See details. n Sample size within bouts. prior Single number initial prior. Must interval \\([0,1]\\). overdispersion.sim character string (function) non-negative number specifying overdispersion parameter used generate simulated counts. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. N Number simulations per true population density trajectory evaluated. seed Optional seed random count generation.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"list average number sampling bouts required reach decision ($AvgSamples), rate acceptance \\(H\\) across provided range population densities ($AcceptRate).","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"kernel probability density function evaluate test specified argument density_func create \"STBP\" object, overdispersion can different generate simulated counts. \"negative binomial\" \"beta-binomial\" used kernel densities test overdispersion.sim specified (NA), specification test used generate counts. Ideally, overdispersion simulations include uncertainty parameter produce robust test evaluations. example, using negative binomial kernel Taylor's Power Law approach obtain overdispersion, overdispersion simulations specified : $$k = \\frac{\\mu^2}{\\mu^b e^z - \\mu}$$ \\(k\\) overdispersion parameter negative binomial distribution, \\(\\) \\(b\\) parameters Taylor's Power Law \\(z\\) normally distributed variable mean \\(0\\) standard deviation \\(\\sigma_{e}\\), root mean square error regression used estimate \\(\\) \\(b\\). See examples. evaluation range eval.range argument cover relevant population densities test applied. densities often around threshold check sampling sizes error rates critical levels. case dynamic hypotheses (vectors), range given factors hypothesized trajectory. example, evaluate test hypothesis trajectory eval.range argument seq(0.1, 2, 0.1), evaluation runs \\(10\\) percent trajectory twice trajectory \\(10\\) percent increments.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. <https://doi.org/10.1111/2041-210X.70053>","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/STBP.eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluation of Sequential tests of Bayesian posterior probabilities — STBP.eval","text":"","code":"# These examples are run with very few simulation runs (argument N), so they # provide unrealistic results. For more reasonable demonstrations check the # vignettes.  # Assuming a negative binomial count variable whose overdispersion parameter, # k, varies as a function of the mean, and that the variance-mean relationship # is well described with Taylor's Power Law, a function to obtain k can be:  estimate_k <- function(mean) {                         a = 1.830012                         b = 1.218041 # a and b are Taylor's Power Law parameters                         (mean^2) / ((a * mean^(b)) - mean)                         }  # Generate some counts to create an STBP object with the model specifications  counts3 <- rnbinom(20, mu = 5, size = estimate_k(5))  # Run the test to create the STBP object  test1F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 9,                           density_func = \"negative binomial\",                           overdispersion = \"estimate_k\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.01,                           upper_criterion = 0.99) #> Error in estimate_k(x): could not find function \"estimate_k\"  test1F #> Error: object 'test1F' not found  # Model evaluation is carried out based on simulated counts, and more realistic # counts could be generated if uncertainty about the overdispersion parameter is # considered. A function to obtain values for the overdispersion parameter, k, # with added stochasticity could be (following Binns et al. 2000):  estimate_k_stoch <- function(mean) {                               a <- 1.830012                               b <- 1.218041                               (mean^2) /                                 ((a * mean^(b) *                                   exp(truncdist::rtrunc(1,                                                         \"norm\",                                                         a = log(1 / (a * mean^(b - 1))),                                                         b = Inf,                                                         mean = 0,                                                         sd = 0.3222354)))                                          - mean)                                    }  # where sd here is the the root of the mean square error for the regression # used to estimate a and b. Note that this is a stochastic version # of 'estimate_k'.  # Run model evaluation for testF1 with varying overdispersion and # added stochasticity with very few simulations to save time.  eval1 <- STBP.eval(test1F,                     eval.range = seq(2, 11),                     n = 1, prior = 0.5,                     overdispersion.sim = \"estimate_k_stoch\",                     N = 2) #> Error: object 'test1F' not found  plot(seq(2, 11), eval1$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval1' not found  plot(seq(2, 11), eval1$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval1' not found  # Alternatively, the evaluation could be carried out omitting variation about # overdispersion. For that the overdispersion argument is omitted and the same # specification of the model is used. Very few simulations to save time.  eval2 <- STBP.eval(test1F,                     eval.range = seq(2, 11),                     n = 1, prior = 0.5,                     N = 2) #> Error: object 'test1F' not found  plot(seq(2, 11), eval2$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval2' not found  plot(seq(2, 11), eval2$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'y' in selecting a method for function 'plot': object 'eval2' not found  # When there is no overdispersion (poisson or binomial distributions) the # procedure is much simpler  test2F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 5,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.01,                           upper_criterion = 0.99)  test2F #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu > 5 #> Probability: 1 from 17 sampling bouts #> Recommendation based on provided criteria: accept H  # Overdispersion is omitted here. Again, very few simulations (N) to save time.  eval3 <- STBP.eval(test2F,                   eval.range = seq(1, 8),                   n = 1,                   prior = 0.5, N = 2)  plot(seq(1, 8), eval3$AvgSamples, type = \"o\", xlab = \"True population size\",       ylab = \"Average number of bouts\")   plot(seq(1, 8), eval3$AcceptRate, type = \"o\", xlab = \"True population size\",       ylab = \"Acceptance rate of H\")   # Variations if n, the sample size within each bout, can also be changed # (not possible in SPRT)!  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of an STBP — int_eval","title":"Simulation of an STBP — int_eval","text":"function called Evaluation Sequential tests Bayesian posterior probabilities, STBP.eval.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of an STBP — int_eval","text":"","code":"int_eval(pop_mean, prior, n, obj, overdispersion.sim = NA, seed = NULL)"},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of an STBP — int_eval","text":"pop_mean True population density. prior Initial prior. n Sample size within bouts. obj STBP object overdispersion.sim Overdispersion parameter function simulations. seed Optional seed random count generation.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of an STBP — int_eval","text":"list average number bouts required reach decision recommendation H","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval2.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of an SPRT — int_eval2","title":"Simulation of an SPRT — int_eval2","text":"function called Evaluation Sequential probability ratio test, SPRT.eval.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of an SPRT — int_eval2","text":"","code":"int_eval2(pop_mean, obj, overdispersion.sim = NA, seed = NULL)"},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of an SPRT — int_eval2","text":"pop_mean True population density. obj SPRT object overdispersion.sim Overdispersion parameter function simulations. seed Optional seed random count generation.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/int_eval2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of an SPRT — int_eval2","text":"list average number bouts required reach decision recommendation H1","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-SPRT-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","title":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","text":"Method signature \"SPRT\" display results stop lines.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-SPRT-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","text":"","code":"# S4 method for class 'SPRT,missing' plot(x, y)"},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-SPRT-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","text":"x Created result call sprt. y Unused entry.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-SPRT-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","text":"data provided, plot cumulative counts contrasted stop lines \"SPRT\". data provided, plot stop lines.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-SPRT-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws a plot with the cumulative introduced counts contrasted with stop lines or stop lines when no data is provided — plot,SPRT,missing-method","text":"","code":"test00 <- sprt(mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) plot(test00) # returns chart with stop lines   counts <- c(2, 5, 6, 2, 7)  test11 <- sprt(data = counts,                 mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) plot(test11) # returns chart with data and stop lines   ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-STBP-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","title":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","text":"Method signature \"STBP\" display resulting probabilities.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-STBP-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","text":"","code":"# S4 method for class 'STBP,missing' plot(x, y)"},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-STBP-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","text":"x Created result call stbp_simple stbp_composite. y Unused entry","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-STBP-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","text":"plot sequence posterior probabilities","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/plot-STBP-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draws a plot with the sequence of posterior probabilities from a sequential test of Bayesian posterior probabilities — plot,STBP,missing-method","text":"","code":"# Testing the hypothesis of a sampled population being greater than trajectory H H <- c(2, 5, 10, 20, 40, 40, 20, 10, 5, 2)  # Generating sequential samples (n = 3) from a population that is 1 below H # (H - 1)  countP <- matrix(NA, 3, 10) set.seed(101) for(i in 1:10){   countP[, i] <- rpois(3, lambda = (H[i] - 1)) }  # Running STBP on the sample  test2F <- stbp_composite(data = countP,                           greater_than = TRUE,                           hypothesis = H,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.001,                           upper_criterion = 0.999) plot(test2F)   ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/show-SPRT-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays results from a ","title":"Displays results from a ","text":"Method signature \"SPRT\" show results test specification.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-SPRT-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays results from a ","text":"","code":"# S4 method for class 'SPRT' show(object)"},{"path":"https://rincondf.github.io/sequential.pops/reference/show-SPRT-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays results from a ","text":"object Created result call sprt.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-SPRT-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays results from a ","text":"summary test results specification (data = NA omitted).","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-SPRT-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displays results from a ","text":"","code":"test00 <- sprt(mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) show(test00) # returns test specification. #>  #> Sequential Probability Ratio Test - Stop lines #> Family: negative binomial #> H0: mu = 2 #> H1: mu = 4  #>  #> Upper line coefficients: #> Intercept =  5.128255 #> Slope =  2.841808 #> Lower line coefficients: #> Intercept =  -5.128255 #> Slope =  2.841808  counts <- c(2, 5, 6, 2, 7)  test11 <- sprt(data = counts,                 mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) show(test11) # returns \"accept H1\" after 5 sampling bouts processed. #>  #> Sequential Probability Ratio Test #> Family: negative binomial #> H0: mu = 2 #> H1: mu = 4  #>  #> Recommendation based on provided criteria: accept H1 #> Number of sampling bouts processed:  5  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/show-STBP-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays results from a ","title":"Displays results from a ","text":"Method signature \"STBP\" show results.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-STBP-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays results from a ","text":"","code":"# S4 method for class 'STBP' show(object)"},{"path":"https://rincondf.github.io/sequential.pops/reference/show-STBP-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays results from a ","text":"object Created result call stbp_simple stbp_composite.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-STBP-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays results from a ","text":"summary test.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/show-STBP-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displays results from a ","text":"","code":"set.seed(101) counts3 <- rpois(5, lambda = 3)  test1F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 5,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.001,                           upper_criterion = 0.999) show(test1F) #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu > 5 #> Probability: 0.00097 from 2 sampling bouts #> Recommendation based on provided criteria: reject H # returns \"reject H\".  counts10 <- matrix(rep(0, 30), 10, 3)  test1G <- stbp_simple(data = counts10,                         density_func= \"poisson\",                         prior = 0.5,                         upper_bnd = Inf,                         lower_criterion = 0,                         upper_criterion = 0.9999) show(test1G) #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.999 from 3 sampling bouts #> Recommendation based on provided criteria: keep sampling  # returns \"keep sampling\" due to insufficient evidence.  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Probability Ratio Test — sprt","title":"Sequential Probability Ratio Test — sprt","text":"Runs Sequential Probability Ratio Test hypotheses population densities form \\(H_{0}:\\mu = \\psi_{0}\\) vs. \\(H_{1}:\\mu < \\psi_{1}\\), \\(\\psi_{0} < \\psi_{1}\\). Data treated sequential framework.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Probability Ratio Test — sprt","text":"","code":"sprt(data = NA, mu0, mu1, density_func, overdispersion, alpha, beta)"},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential Probability Ratio Test — sprt","text":"data Optional vector count data (NAs allowed). value considered sampling bout time. process group sequential data. provided (NA), returns \"SPRT\" object can used plot chart stop lines return stop lines coefficients. provided, returns \"SPRT\" object can used plot chart stop lines data return test summary. mu0 Single non-negative number value low hypothesized population density, \\(\\psi_{0}\\). mu1 Single non-negative number value high hypothesized population density, \\(\\psi_{1}\\). density_func Kernel probability density function data. See details. overdispersion number specifying overdispersion parameter. required using \"negative binomial\" kernel density. See details. alpha Single number indicating tolerable type error rate. beta Single number indicating tolerable type II error rate.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential Probability Ratio Test — sprt","text":"object class \"SPRT\".","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequential Probability Ratio Test — sprt","text":"density_func argument specified character string. Acceptable options \"poisson\", \"negative binomial\", \"binomial\". far know, one ever calculated published stop lines beta-binomial family. overdispersion parameter specified constant. contrast STBP, SPRT use overdispersion calculate stop lines, estimate threshold population density used (e.g., \\(\\psi_{0} < \\psi < \\psi_{1}\\)).","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequential Probability Ratio Test — sprt","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Wald, . (1945) Sequential Tests Statistical Hypotheses. Annals Mathematical Statistics 16(2): 117-186.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/sprt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Probability Ratio Test — sprt","text":"","code":"# If no data is provided, an object of class \"SPRT\" is returned from which a # chart with stop lines or a summary of the test with coefficients for stop lines # can be extracted.  test00 <- sprt(mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1)  test00 # returns test specification and stop lines coefficients #>  #> Sequential Probability Ratio Test - Stop lines #> Family: negative binomial #> H0: mu = 2 #> H1: mu = 4  #>  #> Upper line coefficients: #> Intercept =  5.128255 #> Slope =  2.841808 #> Lower line coefficients: #> Intercept =  -5.128255 #> Slope =  2.841808 plot(test00) # returns a chart with stop lines    # If data is provided, an object of class \"SPRT\" is returned with test results.  counts <- c(2, 5, 6, 2, 7)  test11 <- sprt(data = counts,                 mu0 = 2,                 mu1 = 4,                 density_func = \"negative binomial\",                 overdispersion = 4.6,                 alpha = 0.1,                 beta = 0.1) test11 # returns \"accept H1\" after 5 sampling bouts processed. #>  #> Sequential Probability Ratio Test #> Family: negative binomial #> H0: mu = 2 #> H1: mu = 4  #>  #> Recommendation based on provided criteria: accept H1 #> Number of sampling bouts processed:  5  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"Runs Sequential test Bayesian Posterior Probabilities hypotheses population densities form \\(H:\\mu > \\psi\\) \\(H:\\mu < \\psi\\). Data treated sequential framework.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"","code":"stbp_composite(   data,   greater_than = TRUE,   hypothesis,   density_func,   overdispersion = NA,   prior = 0.5,   lower_bnd = 0,   upper_bnd = Inf,   lower_criterion,   upper_criterion )"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"data count data, either vector (purely sequential designs) matrix (group sequential designs) sequential (non-negative) count data, sampling bouts collected time columns samples within bouts rows. NAs allowed case sample size within bouts unbalanced. binomial data, list matrices integer non-negative values observations col 1 number samples col 2, matrix within list corresponds sampling bout. NAs allowed binomial data. greater_than logical; TRUE (default), tested hypothesis form \\(H:\\mu > \\psi\\) otherwise, \\(H:\\mu < \\psi\\). hypothesis Either single non-negative value vector non-negative values hypothesized population densities, \\(\\psi\\). vector, contain least many values ncol(data) count data length(data) binomial data. density_func Kernel probability density function data. See details. overdispersion character string (function) number specifying overdispersion parameter. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. prior Single number initial prior. Must interval \\([0,1]\\). prior information available 0.5 (default) recommended. lower_bnd Single number indicating lower bound parameter space \\(\\mu\\). cases \\(0\\) (default). upper_bnd Single number indicating upper bound parameter space \\(\\mu\\). count data, often Inf (default), must \\(\\leq 1\\) binomial data. lower_criterion Criterion decide tested hypothesis. maximum credibility hypothesis stop sampling decide . upper_criterion Criterion decide favor tested hypothesis. minimum credibility hypothesis stop sampling decide favor.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"object class \"STBP\".","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"density_func argument specified character string. Acceptable options \"poisson\", \"negative binomial\", \"binomial\" \"beta-binomial\". overdispersion parameter \"negative binomial\" \"beta-binomial\" can either constant function mean. function, specified character string name existing function. options empirical functions describe overdispersion function mean see Binns et al. (2000). common approach negative binomial family Taylor's Power Law, describes variance function mean two parameters, \\(\\) \\(b\\). Overdispersion, \\(k\\), can specified : $$k = \\frac{\\mu^2}{\\mu^b - \\mu}$$","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. <https://doi.org/10.1111/2041-210X.70053>","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_composite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential test of Bayesian posterior probabilities for composite hypotheses — stbp_composite","text":"","code":"# Testing the hypothesis of a population size being greater than 5 individuals # per sampling unit (H: mu > 5). The sequential sampling is made of 5 sampling # bouts made of one sample each.  set.seed(101) counts3 <- rpois(5, lambda = 3)  test1F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 5,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.001,                           upper_criterion = 0.999) test1F #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu > 5 #> Probability: 0.00097 from 2 sampling bouts #> Recommendation based on provided criteria: reject H  # returns \"reject H\".  # Testing the hypothesis of a sampled population being greater than trajectory H H <- c(2, 5, 10, 20, 40, 40, 20, 10, 5, 2)  # Generating sequential samples (n = 3) from a population that is 1 below H # (H - 1)  countP <- matrix(NA, 3, 10) set.seed(101) for(i in 1:10){   countP[, i] <- rpois(3, lambda = (H[i] - 1)) }  # Running STBP on the sample  test2F <- stbp_composite(data = countP,                           greater_than = TRUE,                           hypothesis = H,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.001,                           upper_criterion = 0.999) test2F #> Error in eval(parse(text = as.character(object@call[4]))): object 'H' not found  # returns \"reject H\".  # Testing the hypothesis of a proportion of infested units being greater than # 20% per sampling unit (H: mu > 0.2). The sequential sampling is made of 7 # sampling bouts each with 5 clusters of 10 samples from which binomial # observations are recorded.  set.seed(101)  # binomial data generated with mu (prob) 0.05 over the hypothesized # value (0.2)  counts4 <- list() for(i in 1: 7) {   counts4[[i]] <- matrix(c(rbinom(5, size = 10, prob = 0.25), rep(10, 5)),                         5, 2) }  # Run the test. Notice that upper_bnd = 1!  test3F <- stbp_composite(data = counts4,                           greater_than = TRUE,                           hypothesis = 0.2,                           density_func = \"binomial\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = 1,                           lower_criterion = 0.001,                           upper_criterion = 0.999)  test3F # returns accept H after 3 sampling bouts #>  #> Sequential test of Bayesian posterior probabilities #> Family: binomial #> H: mu > 0.2 #> Probability: 0.99909 from 3 sampling bouts #> Recommendation based on provided criteria: accept H  # Assuming a negative binomial count variable whose overdispersion parameter, # k, varies as a function of the mean, and that the variance-mean relationship # is well described with Taylor's Power Law, a function to obtain k can be:  estimate_k <- function(mean) {                         a = 1.830012                         b = 1.218041 # a and b are Taylor's Power Law parameters                         (mean^2) / ((a * mean^(b)) - mean)                         }  # Generate some counts to create an STBP object with the model specifications  counts3 <- rnbinom(20, mu = 5, size = estimate_k(5))  # Run the test to create the STBP object  test1F <- stbp_composite(data = counts3,                           greater_than = TRUE,                           hypothesis = 9,                           density_func = \"negative binomial\",                           overdispersion = \"estimate_k\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf,                           lower_criterion = 0.01,                           upper_criterion = 0.99) #> Error in estimate_k(x): could not find function \"estimate_k\"  test1F #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu > 5 #> Probability: 0.00097 from 2 sampling bouts #> Recommendation based on provided criteria: reject H  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"function calculates posterior probability hypotheses population densities form \\(H:\\mu > \\psi\\) \\(H:\\mu < \\psi\\), given data single iteration. function used sequential framework, called sequential test stbp_composite.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"","code":"stbp_posterior_composite(   data,   greater_than,   hypothesis,   density_func,   overdispersion = NA,   prior,   lower_bnd = 0,   upper_bnd = Inf )"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"data count data, numeric vector single sampling bout (NAs allowed). binomial data, matrix observations col 1 samples col 2 (NAs allowed). greater_than logical; TRUE, tested hypothesis form \\(H:\\mu > \\psi\\) otherwise, \\(H:\\mu < \\psi\\). hypothesis Single non-negative value hypothesized value \\(\\mu\\). density_func Kernel probability density function data. See details. overdispersion character string (function) number specifying overdispersion parameter. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. prior Single number initial prior. Must interval \\([0,1]\\). lower_bnd Single number indicating lower bound parameter space \\(\\mu\\). cases \\(0\\) (default). upper_bnd Single number indicating upper bound parameter space \\(\\mu\\). count data, often Inf (default), must \\(\\leq 1\\) binomial data.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"single probability","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"density_func argument specified character string. Acceptable options \"poisson\", \"negative binomial\", \"binomial\" \"beta-binomial\". overdispersion parameter \"negative binomial\" \"beta-binomial\" can either constant function mean. function, specified character string name existing function. options empirical functions describe overdispersion function mean see Binns et al. (2000). common approach negative binomial family Taylor's Power Law.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. <https://doi.org/10.1111/2041-210X.70053>","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_composite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior probability calculation for composite hypotheses — stbp_posterior_composite","text":"","code":"# Counts collected in a single sampling bout counts <- c(1, 2, 3)  # Calculate posterior probability from a naive 0.5 prior for H1:mu>2 # (a population being >2 individuals per sampling unit) with # a poisson kernel  stbp_posterior_composite(data = counts,                           greater_than = TRUE,                           hypothesis = 2,                           density_func = \"poisson\",                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf) # returns 0.60630278 #> [1] 0.6063028  # Same analysis but with a negative binomial kernel. # Note that 'overdispersion' can either be a positive number or a function.  stbp_posterior_composite(data = counts,                           greater_than = TRUE,                           hypothesis = 2,                           density_func = \"negative binomial\",                           overdispersion = 2,                           prior = 0.5,                           lower_bnd = 0,                           upper_bnd = Inf) # returns 0.72558593 #> [1] 0.7255859 ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"function calculates posterior probability hypotheses population densities, form \\(H:\\mu = 0\\), given data single iteration. function used sequential framework, called sequential test stbp_simple.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"","code":"stbp_posterior_simple(   data,   density_func,   overdispersion = NA,   prior,   upper_bnd = Inf )"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"data count data, numeric vector single sampling bout (NAs allowed). binomial data, matrix observations col 1 samples col 2 (NAs allowed). density_func Kernel probability density function data. See details. overdispersion character string (function) number specifying overdispersion parameter. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. prior Single number initial prior. Must interval \\([0,1]\\). upper_bnd Single number indicating greatest possible value \\(\\mu\\). count data, often Inf (default), must \\(\\leq 1\\) binomial data.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"single probability","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"density_func argument specified character string. Acceptable options \"poisson\", \"negative binomial\", \"binomial\" \"beta-binomial\". overdispersion parameter \"negative binomial\" \"beta-binomial\" can either constant function mean. function, specified character string name existing function. options empirical functions describe overdispersion function mean see Binns et al. (2000). common approach negative binomial family Taylor's Power Law.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. <https://doi.org/10.1111/2041-210X.70053>","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_posterior_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior calculation for simple hypotheses about species absence — stbp_posterior_simple","text":"","code":"# Counts collected in a single sampling bout counts <- c(0, 0, 0)  # Calculate posterior probability from a naive 0.5 prior for H:mu=0 # (a species being absent in an area) with a poisson kernel.  stbp_posterior_simple(data = counts,                        density_func = \"poisson\",                        prior = 0.5,                        upper_bnd = Inf) # returns 0.75 #> [1] 0.75 ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"Runs Sequential test Bayesian Posterior Probabilities hypotheses species absence form \\(H:\\mu = 0\\). Data treated sequential framework.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"","code":"stbp_simple(   data,   density_func,   overdispersion = NA,   prior = 0.5,   upper_bnd = Inf,   lower_criterion,   upper_criterion )"},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"data count data, either vector (purely sequential designs) o matrix (group sequential designs) sequential count data, sampling bouts collected time columns samples within bouts rows. NAs allowed case sample size within bouts unbalanced. binomial data, list matrices integer non-negative values observations col 1 number samples col 2, matrix within list corresponds sampling bout. NAs allowed binomial data. density_func Kernel probability density function data. See details. overdispersion character string (function) number specifying overdispersion parameter. required using \"negative binomial\" \"beta-binomial\" kernel densities. See details. prior Single number initial prior. Must interval \\([0,1]\\). prior information available 0.5 (default) recommended. upper_bnd Single number indicating greatest possible value \\(\\mu\\). count data, often Inf (default), must \\(\\leq 1\\) binomial data. lower_criterion Criterion decide tested hypothesis. lowest credibility hypothesis stop sampling decide . upper_criterion Criterion decide favor tested hypothesis. greatest credibility hypothesis stop sampling decide favor.","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"object class \"STBP\".","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"density_func argument specified character string. Acceptable options \"poisson\", \"negative binomial\", \"binomial\" \"beta-binomial\". overdispersion parameter \"negative binomial\" \"beta-binomial\" can either constant function mean. function, specified character string name existing function. options empirical functions describe overdispersion function mean see Binns et al. (2000). common approach negative binomial family Taylor's Power Law, describes variance function mean two parameters, \\(\\) \\(b\\). Overdispersion, \\(k\\), can specified : $$k = \\frac{\\mu^2}{\\mu^b - \\mu}$$","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"Binns, M.R., Nyrop, J.P. & Werf, W.v.d. (2000) Sampling monitoring crop protection: theoretical basis developing practical decision guides. CABI Pub., Wallingford, Oxon, UK; New York, N.Y. Rincon, D.F., McCabe, . & Crowder, D.W. (2025) Sequential testing complementary hypotheses population density. Methods Ecology Evolution. <https://doi.org/10.1111/2041-210X.70053>","code":""},{"path":"https://rincondf.github.io/sequential.pops/reference/stbp_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential test of Bayesian posterior probabilities for simple hypotheses about species absence — stbp_simple","text":"","code":"# Testing the absence of a species in a given area from a sequential random # sampling of 3 bouts made of 10 samples (counts) each (all absences). Upper # criterion set to 0.9999  counts10 <- matrix(rep(0, 30), 10, 3)  test1G <- stbp_simple(data = counts10,                         density_func = \"poisson\",                         prior = 0.5,                         upper_bnd = Inf,                         lower_criterion = 0,                         upper_criterion = 0.9999) test1G #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.999 from 3 sampling bouts #> Recommendation based on provided criteria: keep sampling  # returns a recommendation of \"keep sampling\" due to insufficient evidence.  # Testing the same hypothesis with the same upper criterion but from a # sequential random sampling of 3 bouts made of 30 samples (counts) each # (all absences).  counts30 <- matrix(rep(0, 90), 30, 3)  test2G <- stbp_simple(data = counts30,                         density_func= \"poisson\",                         prior = 0.5,                         upper_bnd = Inf,                         lower_criterion = 0,                         upper_criterion = 0.9999) test2G #>  #> Sequential test of Bayesian posterior probabilities #> Family: poisson #> H: mu = 0 #> Probability: 0.99996 from 3 sampling bouts #> Recommendation based on provided criteria: accept H  # returns a recommendation of \"accept H\" of the species being absent from # that area.  ## End (Not run)"},{"path":"https://rincondf.github.io/sequential.pops/news/index.html","id":"sequentialpops-010","dir":"Changelog","previous_headings":"","what":"sequential.pops 0.1.0","title":"sequential.pops 0.1.0","text":"Initial CRAN submission (5/29/2025).","code":""},{"path":"https://rincondf.github.io/sequential.pops/news/index.html","id":"sequentialpops-011","dir":"Changelog","previous_headings":"","what":"sequential.pops 0.1.1","title":"sequential.pops 0.1.1","text":"CRAN release: 2025-06-05 Resubmission CRAN corrections (6/3/2025).","code":""}]
